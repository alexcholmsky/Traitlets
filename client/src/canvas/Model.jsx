/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 ../public/model2.glb 
*/

import React, {useContext, useEffect } from 'react';
import { useSelectionContext } from '../context/SelectionContext.jsx';
import * as THREE from 'three';
import { Decal, useGLTF, useTexture } from '@react-three/drei';
import { Canvas, useThree } from '@react-three/fiber';

export default function Model(props) {
  const { nodes, materials } = useGLTF('/model2.glb')
  const { braceletDetails} = useSelectionContext()
 const { scene } = useThree();
// Define cylinder properties
const radius = 0.5;       // Radius of the cylinder
const height = 1;         // Height of the cylinder
const radialSegments = 20;// Number of segments around the cylinder

// Create a BufferGeometry
const cylinderGeometry = new THREE.BufferGeometry();

// Vertices
const vertices = [];
for (let i = 0; i <= radialSegments; i++) {
    const theta = (i / radialSegments) * Math.PI * 2;
    const x = Math.cos(theta) * radius;
    const z = Math.sin(theta) * radius;
    vertices.push(x, -height / 2, z);
    vertices.push(x, height / 2, z);
}

// Indices
const indices = [];
for (let i = 0; i < radialSegments; i++) {
    const a = i * 2;
    const b = i * 2 + 1;
    const c = i * 2 + 2;
    const d = i * 2 + 3;
    indices.push(a, b, c);
    indices.push(b, d, c);
}

// UVs
const uvs = [];
for (let i = 0; i <= radialSegments; i++) {
    uvs.push(i / radialSegments, 0);
    uvs.push(i / radialSegments, 1);
}

cylinderGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
cylinderGeometry.setIndex(indices);
cylinderGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));

// Create the material and apply the texture
const material = new THREE.MeshBasicMaterial({
    map: new THREE.TextureLoader().load('public/images/purple_cracked.png'),
    side: THREE.DoubleSide,
});

// Create the mesh with the modified geometry and material
const cylinderMesh = new THREE.Mesh(cylinderGeometry, material);
// cylinderMesh.position.set(0.807, 0, 0.807);
// cylinderMesh.rotation.set(Math.PI / 2, 0, 2.356);
// cylinderMesh.scale.set(0.764, 0.649, 0.443);
  
useEffect(() => {
  if (
    braceletDetails?.braceletDetails?.['base-beads']
  ) {
    console.log(braceletDetails.braceletDetails['base-beads'])
    const texture = new THREE.TextureLoader().load(braceletDetails.braceletDetails['base-beads']['image']);
    const mainBead = new THREE.MeshBasicMaterial({
      map: texture,
      color: braceletDetails.braceletDetails['base-beads']['hex'], // Replace with your desired hexadecimal color
    });

    // Replace the existing materials with the new blue material for all spheres
    for (let i = 1; i <= 29; i++) {
      console.log('happening')
      const sphereKey = `Sphere${String(i).padStart(3, '0')}`;
      if (nodes[sphereKey]) {
        nodes[sphereKey].material = mainBead;
      }
    }
  }

  if (
    braceletDetails?.braceletDetails?.['accessory-beads']
  ) {
    console.log(braceletDetails.braceletDetails['accessory-beads'])
    const texture = new THREE.TextureLoader().load(braceletDetails.braceletDetails['accessory-beads']['image']);
    const sideBead = new THREE.MeshBasicMaterial({
      map: texture,
      color: braceletDetails.braceletDetails['accessory-beads']['hex'], // Replace with your desired hexadecimal color
    });

    // Replace the existing materials with the new blue material for all spheres
    for (let i = 10; i <= 11; i++) {
      console.log('happening')
      const sphereKey = `Sphere${String(i).padStart(3, '0')}`;
      if (nodes[sphereKey]) {
        nodes[sphereKey].material = sideBead;
      }
    }
  }

  // if (
  //   braceletDetails?.braceletDetails?.['centerpiece']['front-side']['image']
  // ) {
  //   console.log(braceletDetails.braceletDetails['centerpiece'], braceletDetails.braceletDetails['centerpiece']['front-side']['image'])
  //   const texture = new THREE.TextureLoader().load(braceletDetails.braceletDetails['centerpiece']['front-side']['image']);
  //   const sideBead = new THREE.MeshBasicMaterial({
  //     map: texture
  //   });

  //   // Replace the existing materials with the new blue material for all spheres
  //   for (let i = 1; i <= 1; i++) {
  //     console.log('happening cylinder')
  //     nodes['Cylinder'].material = sideBead
  //   }
  // }
}, [braceletDetails]);

  return (
      <group {...props} dispose={null}>
      <mesh geometry={cylinderMesh.geometry} material={cylinderMesh.material} position={[0.807, 0, 0.807]} rotation={[Math.PI / 2, 0, 2.356]} scale={[0.764, 0.649, 0.443]}>
      </mesh>
      <mesh geometry={nodes.Torus001.geometry} material={nodes.Torus001.material} position={[-0.069, 0, 0.031]} rotation={[0, -0.728, 0]}>
      </mesh>
      <mesh geometry={nodes.Sphere001.geometry} material={nodes.Sphere001.material} position={[0.681, 0, -0.81]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere002.geometry} material={nodes.Sphere002.material} position={[0.302, 0, -1.033]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere003.geometry} material={nodes.Sphere003.material} position={[-0.133, 0, -1.093]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere004.geometry} material={nodes.Sphere004.material} position={[-0.559, 0, -0.983]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere005.geometry} material={nodes.Sphere005.material} position={[-0.909, 0, -0.718]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere006.geometry} material={nodes.Sphere006.material} position={[-1.132, 0, -0.34]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere007.geometry} material={nodes.Sphere007.material} position={[-1.193, 0, 0.095]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere008.geometry} material={nodes.Sphere008.material} position={[-1.082, 0, 0.521]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere009.geometry} material={nodes.Sphere009.material} position={[-0.818, 0, 0.871]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere010.geometry} material={nodes.Sphere010.material} position={[-0.449, 0, 1.122]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere011.geometry} material={nodes.Sphere011.material} position={[0.434, 0, 1.071]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere012.geometry} material={nodes.Sphere012.material} position={[0.772, 0, 0.78]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere013.geometry} material={nodes.Sphere013.material} position={[0.995, 0, 0.401]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere014.geometry} material={nodes.Sphere014.material} position={[1.056, 0, -0.034]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere015.geometry} material={nodes.Sphere015.material} position={[0.945, 0, -0.459]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere016.geometry} material={nodes.Sphere016.material} position={[0.502, 0, -0.94]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere017.geometry} material={nodes.Sphere017.material} position={[0.087, 0, -1.084]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere018.geometry} material={nodes.Sphere018.material} position={[-0.351, 0, -1.059]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere019.geometry} material={nodes.Sphere019.material} position={[-0.747, 0, -0.868]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere020.geometry} material={nodes.Sphere020.material} position={[-1.039, 0, -0.54]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere021.geometry} material={nodes.Sphere021.material} position={[-1.184, 0, -0.125]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere022.geometry} material={nodes.Sphere022.material} position={[-1.158, 0, 0.314]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere023.geometry} material={nodes.Sphere023.material} position={[-0.967, 0, 0.709]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere024.geometry} material={nodes.Sphere024.material} position={[-0.641, 0, 1.005]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere025.geometry} material={nodes.Sphere025.material} position={[0.611, 0, 0.933]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere026.geometry} material={nodes.Sphere026.material} position={[0.902, 0, 0.601]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere027.geometry} material={nodes.Sphere027.material} position={[1.046, 0, 0.187]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere028.geometry} material={nodes.Sphere028.material} position={[1.021, 0, -0.252]} rotation={[0, -0.728, 0]} scale={0.118} />
      <mesh geometry={nodes.Sphere029.geometry} material={nodes.Sphere029.material} position={[0.83, 0, -0.648]} rotation={[0, -0.728, 0]} scale={0.118} />
    </group>
  )
}

useGLTF.preload('/model2.glb')
